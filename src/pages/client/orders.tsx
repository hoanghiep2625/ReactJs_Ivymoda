import { Link } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { getList } from "../../api/provider";
import { useState } from "react";
import Loading from "../../components/loading";
import MenuInfo from "../../components/menuInfo";
import ClientLayout from "../../layouts/clientLayout";
import axiosInstance from "../../services/axiosInstance";
import { ref } from "process";
import { toast } from "react-toastify";
import Swal from "sweetalert2";
const Orders = () => {
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
  });
  const [paymentStatusFilter, setPaymentStatusFilter] = useState("T·∫•t c·∫£");
  const [shippingStatusFilter, setShippingStatusFilter] = useState("T·∫•t c·∫£");
  const userId = localStorage.getItem("user_id");

  const { data, isLoading, error, refetch } = useQuery({
    queryKey: [
      "orders",
      pagination.current,
      pagination.pageSize,
      paymentStatusFilter,
      shippingStatusFilter,
      userId,
    ],
    queryFn: async () => {
      let url = `orders?_page=${pagination.current}&_limit=${pagination.pageSize}`;
      if (paymentStatusFilter !== "T·∫•t c·∫£") {
        url += `&status=${encodeURIComponent(paymentStatusFilter)}`;
      }
      if (shippingStatusFilter !== "T·∫•t c·∫£") {
        url += `&status=${encodeURIComponent(shippingStatusFilter)}`;
      }
      if (userId) {
        url += `&_userId=${userId}`;
      }
      const response = await getList({ namespace: url });
      return response;
    },
  });

  const tableData = data?.data || [];
  const total = data?.total || 0;
  const totalPages = data?.totalPages || Math.ceil(total / pagination.pageSize);
  const currentPage = data?.currentPage || pagination.current;

  if (isLoading) {
    return <Loading />;
  }
  if (error) {
    return <p>Error loading orders: {error.message}</p>;
  }

  const handleTableChange = (page: number, pageSize: number) => {
    setPagination({ current: page, pageSize });
  };
  window.scrollTo({ top: 0, behavior: "smooth" });
  const paymentStatusOptions = [
    "T·∫•t c·∫£",
    "Ch·ªù x√°c nh·∫≠n",
    "Ch·ªù thanh to√°n",
    "ƒê√£ thanh to√°n",
    "Thanh to√°n khi nh·∫≠n h√†ng",
    "Hu·ª∑ do qu√° th·ªùi gian thanh to√°n",
    "Giao d·ªãch b·ªã t·ª´ ch·ªëi do nh√† ph√°t h√†nh",
    "Ng∆∞·ªùi mua hu·ª∑",
    "Ng∆∞·ªùi b√°n hu·ª∑",
  ];

  const shippingStatusOptions = [
    "T·∫•t c·∫£",
    "Ch·ªù x√°c nh·∫≠n",
    "ƒê√£ x√°c nh·∫≠n",
    "ƒêang giao h√†ng",
    "Giao h√†ng th√†nh c√¥ng",
    "ƒê√£ nh·∫≠n h√†ng",
    "Giao h√†ng th·∫•t b·∫°i",
    "Khi·∫øu n·∫°i",
    "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i",
    "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt",
    "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi",
    "Ng∆∞·ªùi mua hu·ª∑",
    "Ng∆∞·ªùi b√°n hu·ª∑",
  ];

  const getPageNumbers = () => {
    const pageNumbers: (number | "...")[] = [];
    const totalNumbersToShow = 5;

    if (totalPages <= totalNumbersToShow + 2) {
      // Hi·ªÉn th·ªã to√†n b·ªô n·∫øu s·ªë trang √≠t
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
      }
    } else {
      pageNumbers.push(1); // Lu√¥n c√≥ trang 1

      if (currentPage > 3) {
        pageNumbers.push("...");
      }

      const start = Math.max(2, currentPage - 1);
      const end = Math.min(totalPages - 1, currentPage + 1);

      for (let i = start; i <= end; i++) {
        pageNumbers.push(i);
      }

      if (currentPage < totalPages - 2) {
        pageNumbers.push("...");
      }

      pageNumbers.push(totalPages); // Lu√¥n c√≥ trang cu·ªëi
    }

    return pageNumbers;
  };

  const handleCancelOrder = async (orderId: string, order: any) => {
    // Hi·ªÉn th·ªã form nh·∫≠p l√Ω do h·ªßy ƒë∆°n
    const { value: formValues } = await Swal.fire({
      title: "H·ªßy ƒë∆°n h√†ng",
      html: `
        <div class="text-left">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            L√Ω do h·ªßy ƒë∆°n <span class="text-red-500">*</span>
          </label>
          <select id="cancelReason" class="swal2-input" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <option value="">Ch·ªçn l√Ω do h·ªßy ƒë∆°n</option>
            <option value="ƒê·ªïi √Ω kh√¥ng mu·ªën mua">ƒê·ªïi √Ω kh√¥ng mu·ªën mua</option>
            <option value="T√¨m ƒë∆∞·ª£c gi√° r·∫ª h∆°n">T√¨m ƒë∆∞·ª£c gi√° r·∫ª h∆°n</option>
            <option value="Th√¥ng tin s·∫£n ph·∫©m kh√¥ng ch√≠nh x√°c">Th√¥ng tin s·∫£n ph·∫©m kh√¥ng ch√≠nh x√°c</option>
            <option value="Th·ªùi gian giao h√†ng qu√° l√¢u">Th·ªùi gian giao h√†ng qu√° l√¢u</option>
            <option value="Kh√°c">Kh√°c</option>
          </select>
          <label class="block text-sm font-medium text-gray-700 mb-2 mt-4">
            Ghi ch√∫ th√™m (t√πy ch·ªçn)
          </label>
          <textarea id="cancelNote" class="swal2-textarea" placeholder="Nh·∫≠p ghi ch√∫ th√™m n·∫øu c√≥..." style="width: 100%; min-height: 80px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; resize: vertical;"></textarea>
          
          ${
            order.paymentStatus === "ƒê√£ thanh to√°n"
              ? `
            <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p class="text-sm text-blue-800">
                <strong>üìù Th√¥ng b√°o:</strong> ƒê∆°n h√†ng ƒë√£ thanh to√°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn t·ª± ƒë·ªông trong v√≤ng 1-3 ng√†y l√†m vi·ªác.
              </p>
              <p class="text-sm text-blue-700 mt-1">
                S·ªë ti·ªÅn ho√†n: <strong>${order.finalAmount.toLocaleString(
                  "vi-VN"
                )}ƒë</strong>
              </p>
            </div>
          `
              : ""
          }
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: "X√°c nh·∫≠n h·ªßy",
      cancelButtonText: "ƒê√≥ng",
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      focusConfirm: false,
      preConfirm: () => {
        const reason = (
          document.getElementById("cancelReason") as HTMLSelectElement
        )?.value;
        const note = (
          document.getElementById("cancelNote") as HTMLTextAreaElement
        )?.value;

        if (!reason) {
          Swal.showValidationMessage("Vui l√≤ng ch·ªçn l√Ω do h·ªßy ƒë∆°n");
          return false;
        }

        return {
          reason: reason,
          note: note,
        };
      },
    });

    if (!formValues) return;

    // X√°c nh·∫≠n cu·ªëi c√πng
    const confirmResult = await Swal.fire({
      title: "X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng?",
      html: `
        <div class="text-left">
          <p><strong>M√£ ƒë∆°n h√†ng:</strong> ${orderId}</p>
          <p><strong>L√Ω do:</strong> ${formValues.reason}</p>
          ${
            formValues.note
              ? `<p><strong>Ghi ch√∫:</strong> ${formValues.note}</p>`
              : ""
          }
          ${
            order.paymentStatus === "ƒê√£ thanh to√°n"
              ? `
            <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p class="text-sm text-yellow-800">
                ‚ö†Ô∏è ƒê∆°n h√†ng ƒë√£ thanh to√°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn t·ª± ƒë·ªông
              </p>
            </div>
          `
              : ""
          }
        </div>
      `,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "H·ªßy ƒë∆°n",
      cancelButtonText: "Quay l·∫°i",
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
    });

    if (!confirmResult.isConfirmed) return;

    try {
      const res = await axiosInstance.post("orders/cancel", {
        orderId,
        cancelBy: "buyer",
        reason: formValues.reason,
        note: formValues.note,
      });

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin ho√†n ti·ªÅn n·∫øu c√≥
      let successMessage = res.data.message || "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng";

      if (res.data.refundInfo && res.data.refundInfo.requiresRefund) {
        successMessage += `\nüí∞ Ho√†n ti·ªÅn: ${res.data.refundInfo.amount.toLocaleString(
          "vi-VN"
        )}ƒë`;
        if (res.data.refundInfo.autoRefund) {
          successMessage += `\n‚úÖ ${res.data.refundInfo.message}`;
        } else {
          successMessage += `\n‚è≥ Ho√†n ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω`;
        }
      }

      await Swal.fire({
        title: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!",
        text: successMessage,
        icon: "success",
        confirmButtonColor: "#059669",
      });

      refetch();
    } catch (err: any) {
      const errorMessage =
        err.response?.data?.message || "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i";

      await Swal.fire({
        title: "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i",
        text: errorMessage,
        icon: "error",
        confirmButtonColor: "#dc2626",
      });
    }
  };
  return (
    <ClientLayout>
      <article className="mt-[98px]">
        <div className="flex gap-4 my-4">
          <div className="text-sm">
            <a href="/">Trang ch·ªß</a>
          </div>
          <div className="text-sm">-</div>
          <div className="text-sm">Qu·∫£n l√Ω ƒë∆°n h√†ng</div>
        </div>
        <hr className="border-t border-gray-300 my-4" />

        <div className="grid grid-cols-[0.7fr_2.5fr] gap-8">
          <div className="p-4 pl-0 font-bold rounded-tl-[40px] rounded-br-[40px] border-gray-700 h-auto mt-2">
            <MenuInfo />
          </div>
          <div className="flex-1 bg-white rounded-lg shadow-sm">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold">Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
              <div className="flex gap-4">
                <div className="w-48">
                  <span className="block text-sm font-medium text-gray-700 mb-1">
                    TT thanh to√°n:
                  </span>
                  <div className="relative">
                    <select
                      value={paymentStatusFilter}
                      onChange={(e) => {
                        setPaymentStatusFilter(e.target.value);
                        setPagination({ ...pagination, current: 1 });
                      }}
                      className="appearance-none w-full bg-white border border-gray-300 rounded-lg px-3 py-2 pr-10 text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:border-gray-400"
                    >
                      {paymentStatusOptions.map((status) => (
                        <option
                          key={status}
                          value={status}
                          className="text-gray-900"
                        >
                          {status}
                        </option>
                      ))}
                    </select>
                    <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3 text-gray-600">
                      <svg
                        className="h-5 w-5"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
                <div className="w-48">
                  <span className="block text-sm font-medium text-gray-700 mb-1">
                    TT giao h√†ng:
                  </span>
                  <div className="relative">
                    <select
                      value={shippingStatusFilter}
                      onChange={(e) => {
                        setShippingStatusFilter(e.target.value);
                        setPagination({ ...pagination, current: 1 });
                      }}
                      className="appearance-none w-full bg-white border border-gray-300 rounded-lg px-3 py-2 pr-10 text-sm text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:border-gray-400"
                    >
                      {shippingStatusOptions.map((status) => (
                        <option
                          key={status}
                          value={status}
                          className="text-gray-900"
                        >
                          {status}
                        </option>
                      ))}
                    </select>
                    <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3 text-gray-600">
                      <svg
                        className="h-5 w-5"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="overflow-x-auto min-h-[450px] flex flex-col justify-between">
              <table className="min-w-full border-collapse bg-white">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      STT
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      M√£ ƒë∆°n h√†ng
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      Ng√†y ƒë·∫∑t
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      TT thanh to√°n
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      TT giao h√†ng
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      T·ªïng ti·ªÅn
                    </th>
                    <th className="py-3 pr-6 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b">
                      Thao t√°c
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {tableData.length > 0 ? (
                    tableData.map((order: any, index: number) => (
                      <tr
                        key={order._id}
                        className="hover:bg-gray-50 transition-colors duration-200"
                      >
                        <td className="py-4 pr-6 text-sm text-gray-900">
                          {pagination.pageSize * (currentPage - 1) + index + 1}
                        </td>
                        <td className="py-4 pr-6 text-sm text-gray-900">
                          {order.orderId}
                        </td>
                        <td className="py-4 pr-6 text-sm text-gray-900">
                          {new Date(order.createdAt).toLocaleString("vi-VN")}
                        </td>
                        <td className="py-4 pr-6">
                          <span
                            className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              order.paymentStatus === "ƒê√£ thanh to√°n"
                                ? "bg-green-100 text-green-800"
                                : order.paymentStatus === "Ch·ªù thanh to√°n"
                                ? "bg-yellow-100 text-yellow-800"
                                : order.paymentStatus ===
                                  "Thanh to√°n khi nh·∫≠n h√†ng"
                                ? "bg-orange-100 text-orange-800"
                                : order.paymentStatus === "Ch·ªù x√°c nh·∫≠n"
                                ? "bg-blue-100 text-blue-800"
                                : order.paymentStatus ===
                                    "Hu·ª∑ do qu√° th·ªùi gian thanh to√°n" ||
                                  order.paymentStatus ===
                                    "Giao d·ªãch b·ªã t·ª´ ch·ªëi do nh√† ph√°t h√†nh"
                                ? "bg-red-100 text-red-800"
                                : order.paymentStatus === "Ng∆∞·ªùi mua hu·ª∑" ||
                                  order.paymentStatus === "Ng∆∞·ªùi b√°n hu·ª∑"
                                ? "bg-red-100 text-red-800"
                                : "bg-gray-100 text-gray-800"
                            }`}
                          >
                            {order.paymentStatus ===
                            "Hu·ª∑ do qu√° th·ªùi gian thanh to√°n"
                              ? "Qu√° h·∫°n thanh to√°n"
                              : order.paymentStatus}
                          </span>
                        </td>
                        <td className="py-4 pr-6">
                          <span
                            className={`px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              order.shippingStatus === "ƒê√£ nh·∫≠n h√†ng"
                                ? "bg-green-100 text-green-800"
                                : order.shippingStatus ===
                                  "Giao h√†ng th√†nh c√¥ng"
                                ? "bg-green-100 text-green-800"
                                : order.shippingStatus === "ƒêang giao h√†ng"
                                ? "bg-purple-100 text-purple-800"
                                : order.shippingStatus === "ƒê√£ x√°c nh·∫≠n"
                                ? "bg-yellow-100 text-yellow-800"
                                : order.shippingStatus === "Ch·ªù x√°c nh·∫≠n"
                                ? "bg-blue-100 text-blue-800"
                                : order.shippingStatus === "Giao h√†ng th·∫•t b·∫°i"
                                ? "bg-red-100 text-red-800"
                                : order.shippingStatus === "Khi·∫øu n·∫°i"
                                ? "bg-orange-100 text-orange-800"
                                : order.shippingStatus ===
                                  "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i"
                                ? "bg-orange-100 text-orange-800"
                                : order.shippingStatus ===
                                  "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt"
                                ? "bg-green-100 text-green-800"
                                : order.shippingStatus ===
                                  "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi"
                                ? "bg-red-100 text-red-800"
                                : order.shippingStatus === "Ng∆∞·ªùi mua hu·ª∑" ||
                                  order.shippingStatus === "Ng∆∞·ªùi b√°n hu·ª∑"
                                ? "bg-red-100 text-red-800"
                                : "bg-gray-100 text-gray-800"
                            }`}
                          >
                            {order.shippingStatus}
                          </span>
                        </td>
                        <td className="py-4 pr-6 text-sm text-gray-900 font-medium">
                          {order.finalAmount.toLocaleString("vi-VN")} ƒë
                        </td>
                        <td className="py-4 pr-6 text-sm font-medium">
                          <div className="flex items-center gap-3">
                            <Link
                              to={`/order-details/${order._id}`}
                              className="text-blue-600 hover:text-blue-900 transition-colors duration-200"
                            >
                              Chi ti·∫øt
                            </Link>
                            {order.paymentStatus === "Ch·ªù thanh to√°n" &&
                              order.paymentUrl && (
                                <a
                                  href={order.paymentUrl}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-green-600 hover:text-green-900 transition-colors duration-200"
                                >
                                  Thanh to√°n
                                </a>
                              )}
                            {/* User ch·ªâ ƒë∆∞·ª£c h·ªßy khi ch∆∞a b·∫Øt ƒë·∫ßu giao h√†ng */}
                            {["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n"].includes(
                              order.shippingStatus
                            ) && (
                              <button
                                onClick={() =>
                                  handleCancelOrder(order.orderId, order)
                                }
                                className="text-red-600 hover:text-red-900 transition-colors duration-200"
                              >
                                Hu·ª∑ ƒë∆°n
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td
                        colSpan={7}
                        className="py-4 text-center text-sm text-gray-600"
                      >
                        Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
              <div className="mt-4 flex justify-center items-center space-x-2 text-sm">
                {/* N√∫t v·ªÅ trang ƒë·∫ßu ¬´ */}
                <button
                  onClick={() => handleTableChange(1, pagination.pageSize)}
                  className="w-9 h-9 border border-black rounded-tl-lg rounded-br-lg transition-all duration-300 bg-white text-black hover:bg-black hover:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={currentPage === 1}
                >
                  &laquo;
                </button>
                {/* C√°c n√∫t s·ªë trang */}
                {getPageNumbers().map((p, index) => (
                  <button
                    key={index}
                    onClick={() =>
                      typeof p === "number" &&
                      handleTableChange(p, pagination.pageSize)
                    }
                    className={`w-9 h-9 border rounded-tl-lg rounded-br-lg transition-all duration-300 ${
                      currentPage === p
                        ? "bg-black text-white border-black cursor-default"
                        : "bg-white text-black border-black hover:bg-black hover:text-white"
                    }`}
                    disabled={typeof p !== "number"}
                  >
                    {p}
                  </button>
                ))}
                {/* N√∫t trang k·∫ø ti·∫øp ¬ª */}
                <button
                  onClick={() =>
                    handleTableChange(currentPage + 1, pagination.pageSize)
                  }
                  className="w-9 h-9 border border-black rounded-tl-lg rounded-br-lg transition-all duration-300 bg-white text-black hover:bg-black hover:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={currentPage >= totalPages}
                >
                  &raquo;
                </button>
              </div>
            </div>
          </div>
        </div>
      </article>
    </ClientLayout>
  );
};

export default Orders;
