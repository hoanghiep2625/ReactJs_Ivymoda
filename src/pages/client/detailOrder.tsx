import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import MenuInfo from "../../components/menuInfo";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { getById } from "../../api/provider";
import Loading from "../../components/loading";
import ClientLayout from "../../layouts/clientLayout";
import { useAddToCart } from "../../hooks/useAddToCart";
import { useAuth } from "../../context/auth.context";
import { toast } from "react-toastify";
import ReviewForm from "../../components/reviewForm";
import ReviewList from "../../components/reviewList";
import axiosInstance from "../../services/axiosInstance";
import ReviewItem from "../../components/reviewItem";
import Swal from "sweetalert2";

const Detail_order = () => {
  const { id } = useParams();
  const queryClient = useQueryClient();
  const navigate = useNavigate();
  const { auth } = useAuth();
  const addToCartMutation = useAddToCart();
  const [open, setOpen] = useState(false);
  const [selectedVariantId, setSelectedVariantId] = useState("");
  const [showReviewForm, setShowReviewForm] = useState<null | {
    orderId: string;
    productVariantId: string;
    mode?: "create" | "edit";
    initialData?: {
      _id: string;
      rating: number;
      comment: string;
      images: { url: string; public_id: string }[];
    };
  }>(null);

  const [showComplaintForm, setShowComplaintForm] = useState(false);

  const { data: reviewList = [] } = useQuery({
    queryKey: ["reviews", id],
    queryFn: async () => {
      const res = await axiosInstance.get(`/reviews?orderId=${id}`);
      return res.data;
    },
  });
  const { data, isLoading } = useQuery({
    queryKey: ["orders", id],
    queryFn: () => getById({ namespace: "orders", id: id }),
  });

  const itemsWithReview = data?.items?.map((item: any) => {
    const review = reviewList.find(
      (r: any) =>
        r.productVariantId === item.productVariantId && r.orderId === data._id
    );
    const productInfo = item.productInfo || {};
    const productName =
      productInfo.product?.name || item.productName || "Kh√¥ng c√≥ t√™n";
    let price = item.price;
    if (productInfo.sizes && item.size) {
      const sizeObj = productInfo.sizes.find((s: any) => s.size === item.size);
      if (sizeObj && sizeObj.price) {
        price = sizeObj.price;
      }
    }
    return {
      ...item,
      review,
      productInfo,
      productName,
      price,
    };
  });

  

  // Mutation x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng
  const { mutate: confirmReceived, isPending: isConfirming } = useMutation({
    mutationFn: async () => {
      await axiosInstance.post(
        `/orders/orders/${data.orderId}/confirm-received`
      );
    },
    onSuccess: () => {
      toast.success("X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng th√†nh c√¥ng!");
      queryClient.invalidateQueries({ queryKey: ["orders", id] });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra");
    },
  });

  // Mutation khi·∫øu n·∫°i
  const { mutate: createComplaint, isPending: isComplaining } = useMutation({
    mutationFn: async (complaintData: {
      reason: string;
      description: string;
      images?: string[];
    }) => {
      await axiosInstance.post(
        `/orders/orders/${data.orderId}/complaint`,
        complaintData
      );
    },
    onSuccess: () => {
      toast.success("Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
      setShowComplaintForm(false);
      queryClient.invalidateQueries({ queryKey: ["orders", id] });
    },
    onError: (error: any) => {
      toast.error(
        error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i khi·∫øu n·∫°i"
      );
    },
  });
  if (isLoading) return <Loading />;
  if (!data)
    return (
      <div className="p-10 text-center text-red-500">
        Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.
      </div>
    );

  const handleViewReview = (variantId: string) => {
    setSelectedVariantId(variantId);
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setSelectedVariantId("");
  };

  const handleBuyAgain = (item: any) => {
    if (!auth.user?.id) {
      toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ mua l·∫°i s·∫£n ph·∫©m!");
      return;
    }
    addToCartMutation.mutate({
      productVariantId: item.productVariantId?._id,
      size: item.size,
      quantity: 1,
      userId: auth.user.id,
    });
  };
  const handleConfirmReceived = () => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng?")) {
      confirmReceived();
    }
  };

  const handleSubmitComplaint = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const reason = formData.get("reason") as string;
    const description = formData.get("description") as string;

    if (!reason || !description) {
      toast.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin khi·∫øu n·∫°i");
      return;
    }

    createComplaint({ reason, description });
  };

  // H√†m h·ªßy ƒë∆°n h√†ng
  const handleCancelOrder = async () => {
    // Hi·ªÉn th·ªã form nh·∫≠p l√Ω do h·ªßy ƒë∆°n
    const { value: formValues } = await Swal.fire({
      title: "H·ªßy ƒë∆°n h√†ng",
      html: `
        <div class="text-left">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            L√Ω do h·ªßy ƒë∆°n <span class="text-red-500">*</span>
          </label>
          <select id="cancelReason" class="swal2-input" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <option value="">Ch·ªçn l√Ω do h·ªßy ƒë∆°n</option>
            <option value="ƒê·ªïi √Ω kh√¥ng mu·ªën mua">ƒê·ªïi √Ω kh√¥ng mu·ªën mua</option>
            <option value="T√¨m ƒë∆∞·ª£c gi√° r·∫ª h∆°n">T√¨m ƒë∆∞·ª£c gi√° r·∫ª h∆°n</option>
            <option value="Th√¥ng tin s·∫£n ph·∫©m kh√¥ng ch√≠nh x√°c">Th√¥ng tin s·∫£n ph·∫©m kh√¥ng ch√≠nh x√°c</option>
            <option value="Th·ªùi gian giao h√†ng qu√° l√¢u">Th·ªùi gian giao h√†ng qu√° l√¢u</option>
            <option value="Kh√°c">Kh√°c</option>
          </select>
          <label class="block text-sm font-medium text-gray-700 mb-2 mt-4">
            Ghi ch√∫ th√™m (t√πy ch·ªçn)
          </label>
          <textarea id="cancelNote" class="swal2-textarea" placeholder="Nh·∫≠p ghi ch√∫ th√™m n·∫øu c√≥..." style="width: 100%; min-height: 80px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; resize: vertical;"></textarea>
          
          ${
            data.paymentStatus === "ƒê√£ thanh to√°n"
              ? `
            <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p class="text-sm text-blue-800">
                <strong>üìù Th√¥ng b√°o:</strong> ƒê∆°n h√†ng ƒë√£ thanh to√°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn t·ª± ƒë·ªông trong v√≤ng 1-3 ng√†y l√†m vi·ªác.
              </p>
              <p class="text-sm text-blue-700 mt-1">
                S·ªë ti·ªÅn ho√†n: <strong>${data.finalAmount.toLocaleString(
                  "vi-VN"
                )}ƒë</strong>
              </p>
            </div>
          `
              : ""
          }
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: "X√°c nh·∫≠n h·ªßy",
      cancelButtonText: "ƒê√≥ng",
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
      focusConfirm: false,
      preConfirm: () => {
        const reason = (
          document.getElementById("cancelReason") as HTMLSelectElement
        )?.value;
        const note = (
          document.getElementById("cancelNote") as HTMLTextAreaElement
        )?.value;

        if (!reason) {
          Swal.showValidationMessage("Vui l√≤ng ch·ªçn l√Ω do h·ªßy ƒë∆°n");
          return false;
        }

        return {
          reason: reason,
          note: note,
        };
      },
    });

    if (!formValues) return;

    // X√°c nh·∫≠n cu·ªëi c√πng
    const confirmResult = await Swal.fire({
      title: "X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng?",
      html: `
        <div class="text-left">
          <p><strong>M√£ ƒë∆°n h√†ng:</strong> ${data.orderId}</p>
          <p><strong>L√Ω do:</strong> ${formValues.reason}</p>
          ${
            formValues.note
              ? `<p><strong>Ghi ch√∫:</strong> ${formValues.note}</p>`
              : ""
          }
          ${
            data.paymentStatus === "ƒê√£ thanh to√°n"
              ? `
            <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p class="text-sm text-yellow-800">
                ‚ö†Ô∏è ƒê∆°n h√†ng ƒë√£ thanh to√°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn t·ª± ƒë·ªông
              </p>
            </div>
          `
              : ""
          }
        </div>
      `,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "H·ªßy ƒë∆°n",
      cancelButtonText: "Quay l·∫°i",
      confirmButtonColor: "#dc2626",
      cancelButtonColor: "#6b7280",
    });

    if (!confirmResult.isConfirmed) return;

    try {
      const res = await axiosInstance.post("orders/cancel", {
        orderId: data.orderId,
        cancelBy: "buyer",
        reason: formValues.reason,
        note: formValues.note,
      });

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin ho√†n ti·ªÅn n·∫øu c√≥
      let successMessage = res.data.message || "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng";

      if (res.data.refundInfo && res.data.refundInfo.requiresRefund) {
        successMessage += `\nüí∞ Ho√†n ti·ªÅn: ${res.data.refundInfo.amount.toLocaleString(
          "vi-VN"
        )}ƒë`;
        if (res.data.refundInfo.autoRefund) {
          successMessage += `\n‚úÖ ${res.data.refundInfo.message}`;
        } else {
          successMessage += `\n‚è≥ Ho√†n ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω`;
        }
      }

      await Swal.fire({
        title: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!",
        text: successMessage,
        icon: "success",
        confirmButtonColor: "#059669",
      });

      // Refresh data ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
      queryClient.invalidateQueries({ queryKey: ["orders", id] });

      // Chuy·ªÉn v·ªÅ trang qu·∫£n l√Ω ƒë∆°n h√†ng
      navigate("/orders");
    } catch (err: any) {
      const errorMessage =
        err.response?.data?.message || "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i";

      await Swal.fire({
        title: "H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i",
        text: errorMessage,
        icon: "error",
        confirmButtonColor: "#dc2626",
      });
    }
  };

  return (
    <ClientLayout>
      <article className="mt-[98px]">
        <div className="flex gap-4 my-4">
          <div className="text-sm">
            <a href="/">Trang ch·ªß</a>
          </div>
          <div className="text-sm">-</div>
          <div className="text-sm">
            <div className="text-sm flex gap-4">
              <div>Chi ti·∫øt ƒë∆°n h√†ng</div>
            </div>
          </div>
          <div className="text-sm">-</div>
          <div className="text-sm">
            <div className="text-sm flex gap-4">
              <div>{data.orderId}</div>
            </div>
          </div>
        </div>
        <hr className="border-t border-gray-300 my-4" />

        <div className="grid grid-cols-[0.7fr_2.5fr] gap-8">
          <div className="p-4 pl-0 font-bold rounded-tl-[40px] rounded-br-[40px] border-gray-700 h-auto mt-2">
            <MenuInfo />
          </div>
          <div className="p-4 pl-0">
            <div className="flex justify-between mb-6">
              <h2 className="text-2xl font-semibold">
                Chi ti·∫øt ƒë∆°n h√†ng
                <span className="text-red-600 ml-2">#{data.orderId}</span>
              </h2>
              <div className="flex flex-col items-end text-sm">
                <span className="text-red-500">
                  TT thanh to√°n: {data.paymentStatus}
                </span>
                <span className="text-red-500">
                  TT giao h√†ng: {data.shippingStatus}
                </span>
              </div>
            </div>

            <div className="flex flex-col lg:flex-row justify-between">
              <div className="grid grid-cols-1">
                {itemsWithReview?.map((item: any, index: any) => (
                  <div key={index} className="flex-1">
                    <div className="flex gap-4">
                      <img
                        src={
                          item.productInfo?.images?.main?.url
                            ? item.productInfo.images.main.url
                            : "https://via.placeholder.com/150x215?text=No+Image"
                        }
                        alt={item.productName}
                        className="w-[100px] h-[165px] object-cover"
                      />
                      <div className="flex flex-col justify-between">
                        <div key={index}>
                          <div className="flex justify-between gap-[110px]">
                            <div className="font-semibold">
                              {item.productName}
                            </div>
                            <div className="font-semibold">
                              {Number(item.price || 0).toLocaleString("vi-VN")}ƒë
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 py-0.5">
                            M√†u s·∫Øc:{" "}
                            {item.productInfo?.color?.colorName ||
                              item.color ||
                              "Kh√¥ng c√≥"}
                          </p>
                          <p className="text-sm text-gray-600 py-0.5">
                            Size: {item.size}
                          </p>
                          <p className="text-sm text-gray-600 py-0.5">
                            S·ªë l∆∞·ª£ng: {item.quantity}
                          </p>
                          <p className="text-sm text-gray-600 py-0.5">
                            SKU:{" "}
                            {item.productInfo?.sku || item.sku || "Kh√¥ng c√≥"}
                          </p>
                        </div>
                        <div className="flex gap-2">
                          <button
                            onClick={() => handleBuyAgain(item)}
                            className="w-fit mt-2 px-4 py-1 border border-black rounded-tl-[8px] rounded-bl-none rounded-tr-none rounded-br-[8px] hover:bg-black hover:text-white transition"
                          >
                            MUA L·∫†I
                          </button>
                          {data.shippingStatus?.toLowerCase() ===
                            "ƒë√£ nh·∫≠n h√†ng" && (
                            <>
                              {!item.review ? (
                                <button
                                  onClick={() =>
                                    setShowReviewForm({
                                      orderId: data._id,
                                      productVariantId: item.productVariantId,
                                    })
                                  }
                                  className="w-fit mt-2 px-4 py-1 border border-black bg-black text-white rounded-tl-[8px] rounded-bl-none rounded-tr-none rounded-br-[8px] hover:bg-white hover:text-black transition"
                                >
                                  ƒê√°nh gi√°
                                </button>
                              ) : (
                                <div className="flex gap-2 mt-2">
                                  <button
                                    onClick={() =>
                                      handleViewReview(item.productVariantId)
                                    }
                                    className="px-4 py-1 rounded-tl-[8px] rounded-bl-none rounded-tr-none rounded-br-[8px] border border-black bg-black text-white hover:bg-white hover:text-black transition"
                                  >
                                    XEM ƒê√ÅNH GI√Å
                                  </button>
                                  
                                  {item.review?.updatedCount === 0 && (
                                    <>
                                      <button
                                        onClick={() =>
                                          setShowReviewForm({
                                            orderId: data._id,
                                            productVariantId:
                                              item.productVariantId,
                                            mode: "edit",
                                            initialData: item.review,
                                          })
                                        }
                                        className="px-4 py-1 rounded-tl-[8px] rounded-bl-none rounded-tr-none rounded-br-[8px] border border-black bg-black text-white hover:bg-white hover:text-black transition"
                                      >
                                        S·ª¨A
                                      </button>
                                    </>
                                  )}
                                </div>
                              )}
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                    <hr className="mt-2 w-[600px]" />
                  </div>
                ))}
              </div>

              <div className="w-full lg:w-[320px] bg-[#f7f7f7] p-5 rounded-md text-sm space-y-5 shadow-sm">
                <h3 className="text-base font-semibold pb-3 border-b border-gray-300">
                  T√≥m t·∫Øt ƒë∆°n h√†ng
                </h3>

                <div className="space-y-2 text-gray-700">
                  <div className="flex justify-between">
                    <span>Ng√†y t·∫°o ƒë∆°n</span>
                    <span className="font-medium">
                      {new Date(data.updatedAt).toLocaleDateString("vi-VN")}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>T·∫°m t√≠nh</span>
                    <span className="font-medium">
                      {data.totalPrice.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn</span>
                    <span className="font-medium">
                      {data.shippingFee.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Gi·∫£m gi√°</span>
                    <span className="font-medium">
                      {data.discountAmount.toLocaleString("vi-VN")} ƒë
                    </span>
                  </div>
                  <div className="flex justify-between font-semibold pt-3 border-t border-gray-300 mt-2 text-base">
                    <span>T·ªïng ti·ªÅn</span>
                    <span>{data.finalAmount.toLocaleString("vi-VN")} ƒë</span>
                  </div>

                  {/* Hi·ªÉn th·ªã th√¥ng tin ho√†n ti·ªÅn n·∫øu c√≥ */}
                  {data.paymentDetails?.refundRequested && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <h5 className="font-semibold text-blue-800 mb-2">
                        üí∞ Th√¥ng tin ho√†n ti·ªÅn
                      </h5>
                      <div className="text-sm space-y-1">
                        <div className="flex justify-between">
                          <span>S·ªë ti·ªÅn ho√†n:</span>
                          <span className="font-medium">
                            {data.paymentDetails.refundAmount?.toLocaleString(
                              "vi-VN"
                            )}{" "}
                            ƒë
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Tr·∫°ng th√°i:</span>
                          <span
                            className={`font-medium ${
                              data.paymentDetails.refundStatus ===
                                "completed" ||
                              data.paymentDetails.refundStatus ===
                                "ƒê√£ ho√†n th√†nh"
                                ? "text-green-600"
                                : data.paymentDetails.refundStatus ===
                                    "pending" ||
                                  data.paymentDetails.refundStatus ===
                                    "ƒêang x·ª≠ l√Ω"
                                ? "text-yellow-600"
                                : data.paymentDetails.refundStatus ===
                                    "failed" ||
                                  data.paymentDetails.refundStatus ===
                                    "B·ªã t·ª´ ch·ªëi"
                                ? "text-red-600"
                                : "text-blue-600"
                            }`}
                          >
                            {data.paymentDetails.refundStatus === "completed"
                              ? "ƒê√£ ho√†n th√†nh"
                              : data.paymentDetails.refundStatus === "pending"
                              ? "ƒêang x·ª≠ l√Ω"
                              : data.paymentDetails.refundStatus === "failed"
                              ? "Th·∫•t b·∫°i"
                              : data.paymentDetails.refundStatus ||
                                "ƒêang x·ª≠ l√Ω"}
                          </span>
                        </div>
                        {data.paymentDetails.refundRequestedAt && (
                          <div className="flex justify-between">
                            <span>Ng√†y y√™u c·∫ßu:</span>
                            <span className="font-medium">
                              {new Date(
                                data.paymentDetails.refundRequestedAt
                              ).toLocaleDateString("vi-VN")}
                            </span>
                          </div>
                        )}
                        {data.paymentDetails.refundProcessedAt && (
                          <div className="flex justify-between">
                            <span>Ng√†y x·ª≠ l√Ω:</span>
                            <span className="font-medium">
                              {new Date(
                                data.paymentDetails.refundProcessedAt
                              ).toLocaleDateString("vi-VN")}
                            </span>
                          </div>
                        )}
                        {data.paymentDetails.refundNote && (
                          <div className="mt-2">
                            <span className="font-medium">Ghi ch√∫:</span>
                            <p className="text-gray-600 mt-1">
                              {data.paymentDetails.refundNote}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <h4 className="font-semibold border-t pt-3 mb-1">
                    H√¨nh th·ª©c thanh to√°n
                  </h4>
                  <p className="py-1 text-gray-700">{data.paymentMethod}</p>
                </div>

                <div>
                  <h4 className="font-semibold border-t pt-3 mb-1">
                    ƒê∆°n v·ªã v·∫≠n chuy·ªÉn
                  </h4>
                  <p className="py-1 text-gray-700">Chuy·ªÉn ph√°t nhanh</p>
                </div>

                <div>
                  <h4 className="font-semibold border-t pt-3 mb-1">ƒê·ªãa ch·ªâ</h4>
                  <p className="py-1 text-gray-700">{data.receiver.name}</p>
                  <p className="py-1 text-gray-700">
                    {data.receiver.address}, {data.receiver.communeName},{" "}
                    {data.receiver.districtName}, {data.receiver.cityName}{" "}
                  </p>
                  <p className="py-1 text-gray-700">
                    ƒêi·ªán tho·∫°i: {data.receiver.phone}
                  </p>
                </div>
              </div>
            </div>

            {/* C√°c n√∫t thao t√°c d·ª±a tr√™n tr·∫°ng th√°i ƒë∆°n h√†ng */}
            <div className="mt-6 p-4 bg-gray-50 rounded-lg">
              <h3 className="font-semibold mb-3">Thao t√°c v·ªõi ƒë∆°n h√†ng</h3>

              {/* N√∫t h·ªßy ƒë∆°n h√†ng - ch·ªâ hi·ªÉn th·ªã khi c√≥ th·ªÉ h·ªßy */}
              {["Ch·ªù x√°c nh·∫≠n", "ƒê√£ x√°c nh·∫≠n"].includes(
                data.shippingStatus
              ) && (
                <div className="mb-4 pb-4 border-b border-gray-200">
                  <button
                    onClick={handleCancelOrder}
                    className="px-4 py-2 bg-red-600 text-white rounded-tl-xl rounded-br-xl hover:bg-red-700 transition"
                  >
                    H·ªßy ƒë∆°n h√†ng
                  </button>
                  <p className="text-sm text-gray-600 mt-2">
                    B·∫°n c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu giao h√†ng
                  </p>
                </div>
              )}

              {data.shippingStatus === "Giao h√†ng th√†nh c√¥ng" && (
                <div className="flex gap-3 flex-wrap">
                  <button
                    onClick={handleConfirmReceived}
                    disabled={isConfirming}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition disabled:opacity-50"
                  >
                    {isConfirming ? "ƒêang x·ª≠ l√Ω..." : "‚úì X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng"}
                  </button>

                  <button
                    onClick={() => setShowComplaintForm(true)}
                    className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition"
                  >
                    ‚ö† Khi·∫øu n·∫°i ch∆∞a nh·∫≠n h√†ng
                  </button>
                </div>
              )}

              {data.shippingStatus === "ƒêang giao h√†ng" && (
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowComplaintForm(true)}
                    className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition"
                  >
                    ‚ö† B√°o c√°o v·∫•n ƒë·ªÅ giao h√†ng
                  </button>
                </div>
              )}

              {data.shippingStatus === "ƒê√£ nh·∫≠n h√†ng" && (
                <div className="text-green-600 font-medium">
                  ‚úì B·∫°n ƒë√£ x√°c nh·∫≠n nh·∫≠n h√†ng th√†nh c√¥ng
                </div>
              )}

              {(data.shippingStatus === "Khi·∫øu n·∫°i" ||
                data.shippingStatus === "ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i") && (
                <div className="bg-yellow-100 p-3 rounded-lg">
                  <div className="text-yellow-800 font-medium mb-2">
                    üìã Tr·∫°ng th√°i khi·∫øu n·∫°i: {data.shippingStatus}
                  </div>
                  {data.complaint && (
                    <div className="text-sm text-gray-700">
                      <p>
                        <strong>L√Ω do:</strong> {data.complaint.reason}
                      </p>
                      <p>
                        <strong>M√¥ t·∫£:</strong> {data.complaint.description}
                      </p>
                      <p>
                        <strong>Ng√†y t·∫°o:</strong>{" "}
                        {new Date(data.complaint.createdAt).toLocaleDateString(
                          "vi-VN"
                        )}
                      </p>
                      <p>
                        <strong>Tr·∫°ng th√°i:</strong> {data.complaint.status}
                      </p>
                      {data.complaint.adminNote && (
                        <p>
                          <strong>Ghi ch√∫ admin:</strong>{" "}
                          {data.complaint.adminNote}
                        </p>
                      )}
                      {data.complaint.resolution && (
                        <p>
                          <strong>C√°ch gi·∫£i quy·∫øt:</strong>{" "}
                          {data.complaint.resolution}
                        </p>
                      )}
                    </div>
                  )}
                </div>
              )}

              {data.shippingStatus === "Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt" && (
                <div className="bg-green-100 p-3 rounded-lg">
                  <div className="text-green-800 font-medium mb-2">
                    ‚úÖ Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt
                  </div>
                  {data.complaint && (
                    <div className="text-sm text-gray-700">
                      <p>
                        <strong>C√°ch gi·∫£i quy·∫øt:</strong>{" "}
                        {data.complaint.resolution}
                      </p>
                      {data.complaint.adminNote && (
                        <p>
                          <strong>Ghi ch√∫:</strong> {data.complaint.adminNote}
                        </p>
                      )}
                    </div>
                  )}
                </div>
              )}

              {data.shippingStatus === "Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi" && (
                <div className="bg-red-100 p-3 rounded-lg">
                  <div className="text-red-800 font-medium mb-2">
                    ‚ùå Khi·∫øu n·∫°i b·ªã t·ª´ ch·ªëi
                  </div>
                  {data.complaint?.adminNote && (
                    <div className="text-sm text-gray-700">
                      <p>
                        <strong>L√Ω do t·ª´ ch·ªëi:</strong>{" "}
                        {data.complaint.adminNote}
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>

            <div className="mt-8">
              <button
                className="bg-black text-white px-6 py-2 rounded-tl-[8px] rounded-bl-none rounded-tr-none rounded-br-[8px] hover:opacity-90 transition"
                onClick={() => navigate(`/order-follow/${data._id}`)}
              >
                THEO D√ïI ƒê∆†N H√ÄNG
              </button>
            </div>
          </div>
        </div>
      </article>

      {showComplaintForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg max-w-md w-full mx-4 relative">
            <button
              onClick={() => setShowComplaintForm(false)}
              className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
            >
              ‚úï
            </button>

            <h3 className="text-lg font-semibold mb-4">Khi·∫øu n·∫°i ƒë∆°n h√†ng</h3>

            <form onSubmit={handleSubmitComplaint} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  L√Ω do khi·∫øu n·∫°i <span className="text-red-500">*</span>
                </label>
                <select
                  name="reason"
                  required
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Ch·ªçn l√Ω do khi·∫øu n·∫°i</option>
                  <option value="Ch∆∞a nh·∫≠n ƒë∆∞·ª£c h√†ng">
                    Ch∆∞a nh·∫≠n ƒë∆∞·ª£c h√†ng
                  </option>
                  <option value="H√†ng b·ªã h∆∞ h·ªèng">H√†ng b·ªã h∆∞ h·ªèng</option>
                  <option value="Sai s·∫£n ph·∫©m">Sai s·∫£n ph·∫©m</option>
                  <option value="Thi·∫øu h√†ng">Thi·∫øu h√†ng</option>
                  <option value="Kh√°c">Kh√°c</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  M√¥ t·∫£ chi ti·∫øt <span className="text-red-500">*</span>
                </label>
                <textarea
                  name="description"
                  required
                  rows={4}
                  placeholder="Vui l√≤ng m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i..."
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                />
              </div>

              <div className="text-sm text-gray-600">
                <p>‚Ä¢ Khi·∫øu n·∫°i s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 24-48h</p>
                <p>
                  ‚Ä¢ Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
                </p>
              </div>

              <div className="flex gap-3 pt-2">
                <button
                  type="button"
                  onClick={() => setShowComplaintForm(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  disabled={isComplaining}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition disabled:opacity-50"
                >
                  {isComplaining ? "ƒêang g·ª≠i..." : "G·ª≠i khi·∫øu n·∫°i"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showReviewForm && (
        <>
          {console.log("showReviewForm:", showReviewForm)}
          <div className="fixed inset-0 bg-black bg-opacity-40 z-50 flex items-center justify-center">
            <div className="bg-white p-6 rounded-lg max-w-md w-full relative">
              <button
                onClick={() => setShowReviewForm(null)}
                className="absolute top-2 right-2 text-gray-500 hover:text-red-500"
              >
                ‚úï
              </button>
              <ReviewForm
                mode={showReviewForm.mode}
                orderId={showReviewForm.orderId}
                productVariantId={showReviewForm.productVariantId}
                initialData={showReviewForm.initialData}
                onSuccess={() => {
                  setShowReviewForm(null);
                  window.location.reload();
                }}
              />
            </div>
          </div>
        </>
      )}

      {open && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded shadow-xl w-full max-w-xl">
            <ReviewItem
              productVariantId={selectedVariantId}
              orderId={data._id}
              userId={auth.user?.id}
            />
            <div className="text-right mt-4">
              <button
                onClick={handleClose}
                className="px-4 py-2 bg-gray-300 rounded"
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </ClientLayout>
  );
};

export default Detail_order;
