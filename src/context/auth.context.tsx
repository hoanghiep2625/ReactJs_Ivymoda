// Ki·ªÉu ƒë∆°n h√†ng ch∆∞a thanh to√°n
interface Order {
  _id: string;
  orderId: string;
  finalAmount: number;
  paymentStatus: string;
}
import {
  createContext,
  ReactNode,
  useEffect,
  useState,
  Dispatch,
  SetStateAction,
  useContext,
} from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { info, logout } from "../services/userService";
import { AxiosError } from "axios";
import Loading from "../components/loading";
import ChatBox from "../components/ChatBox";

// ƒê·ªãnh nghƒ©a state x√°c th·ª±c
interface AuthState {
  isAuthenticated: boolean;
  isAuthenticating: boolean;
  user: {
    id: string;
    email: string;
    role: string;
  };
}

// Interface cho context
interface AuthContextType {
  auth: AuthState;
  setAuth: Dispatch<SetStateAction<AuthState>>;
  pendingOrders: Order[];
  setPendingOrders: Dispatch<SetStateAction<Order[]>>;
}

// T·∫°o context
export const AuthContext = createContext<AuthContextType | undefined>(
  undefined
);

// Custom hook ƒë·ªÉ d√πng context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong AuthProvider");
  }
  return context;
};

// Props cho AuthWrapper
interface AuthWrapperProps {
  children: ReactNode;
}

// Component bao b·ªçc x√°c th·ª±c
export const AuthWrapper = ({ children }: AuthWrapperProps) => {
  const queryClient = useQueryClient();
  const [auth, setAuth] = useState<AuthState>({
    isAuthenticated: false,
    isAuthenticating: true,
    user: {
      id: "",
      email: "",
      role: "",
    },
  });
  const [pendingOrders, setPendingOrders] = useState<Order[]>([]);

  // G·ªçi API user info n·∫øu c√≥ token
  const { data, isLoading, error } = useQuery({
    queryKey: ["userInfo"],
    queryFn: info,
    enabled: !!localStorage.getItem("token"),
    staleTime: 1000 * 60 * 5, // optional: cache 5 ph√∫t
    retry: false, // Kh√¥ng retry khi l·ªói 401
  });

  // Ki·ªÉm tra token ngay khi component mount
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      // N·∫øu kh√¥ng c√≥ token, set auth ngay l·∫≠p t·ª©c
      setAuth({
        isAuthenticated: false,
        isAuthenticating: false,
        user: { id: "", email: "", role: "" },
      });
    }
  }, []);

  // X·ª≠ l√Ω logout
  const handleLogout = async () => {
    try {
      await logout();
      localStorage.removeItem("token");

      // Clear t·∫•t c·∫£ React Query cache
      queryClient.clear();

      setAuth({
        isAuthenticated: false,
        isAuthenticating: false,
        user: {
          id: "",
          email: "",
          role: "",
        },
      });
      setPendingOrders([]);

      // Kh√¥ng d√πng window.location.href ƒë·ªÉ tr√°nh reload
      // window.location.href = "/login";
    } catch (logoutError) {
      console.error("L·ªói khi ƒëƒÉng xu·∫•t:", logoutError);
    }
  };

  // Khi c√≥ thay ƒë·ªïi t·ª´ react-query, c·∫≠p nh·∫≠t l·∫°i auth
  useEffect(() => {
    console.log("üì¶ useEffect: ", { data, error, isLoading });

    if (isLoading) {
      setAuth((prev) => ({ ...prev, isAuthenticating: true }));
    } else if (data) {
      setAuth({
        isAuthenticated: true,
        isAuthenticating: false,
        user: {
          id: data.id || "",
          email: data.email || "",
          role: data.role || "",
        },
      });

      // G·ªçi API ƒë∆°n h√†ng ch∆∞a thanh to√°n sau khi x√°c th·ª±c th√†nh c√¥ng
      import("../services/axiosInstance").then(({ default: axiosInstance }) => {
        axiosInstance
          .get("/orders/get-pending-payment-orders")
          .then((res) => {
            const orders = res.data?.data || [];
            setPendingOrders(orders);
          })
          .catch((err) => {
            setPendingOrders([]);
          });
      });
    } else if (error) {
      const axiosError = error as AxiosError;
      if (axiosError.response?.status === 401) {
        handleLogout();
      } else {
        setAuth({
          isAuthenticated: false,
          isAuthenticating: false,
          user: {
            id: "",
            email: "",
            role: "",
          },
        });
      }
    } else {
      // N·∫øu kh√¥ng c√≥ data, kh√¥ng c√≥ error, nh∆∞ng isLoading = false ‚Üí fallback
      setAuth((prev) => ({ ...prev, isAuthenticating: false }));
    }
  }, [data, error, isLoading]);

  // Hi·ªÉn th·ªã loading khi ƒëang x√°c th·ª±c
  if (auth.isAuthenticating) {
    return <Loading />;
  }

  // Tr·∫£ v·ªÅ context cho to√†n b·ªô app
  return (
    <AuthContext.Provider
      value={{ auth, setAuth, pendingOrders, setPendingOrders }}
    >
      {children}
      {/* ChatBox s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã khi user ƒëƒÉng nh·∫≠p */}
      <ChatBox />
    </AuthContext.Provider>
  );
};
